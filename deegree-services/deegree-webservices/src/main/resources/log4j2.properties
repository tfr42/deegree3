name = deegreeWebservicesLogConfig
status = error

property.filename = deegree.log
property.logpath = ${sys:log.dir:-./logs}

appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d %p %C{1.} [%t] %m%n
appender.console.filter.threshold.type = ThresholdFilter
appender.console.filter.threshold.level = info

appender.rolling.type = RollingFile
appender.rolling.name = RollingFile
appender.rolling.fileName = ${logpath}/${filename}
appender.rolling.filePattern = ${logpath}/deegree-%d{MM-dd-yyyy}-%i.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d %p %C{1.} [%t] %m%n
appender.rolling.policies.type = Policies
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size=100MB
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.max = 10

rootLogger.level = info
rootLogger.appenderRefs = console,rolling
rootLogger.appenderRef.console.ref = STDOUT
rootLogger.appenderRef.rolling.ref = RollingFile

logger.deegree.name = org.deegree
logger.deegree.level = warn

logger.reflections.name = org.reflections
logger.reflections.level = fatal

logger.jsf.name = com.sun.faces
logger.jsf.level = error

logger.primefaces.name = org.primefaces
logger.primefaces.level = error

# ======================================================================================================================
# ====================== Debugging messages, useful for in-depth debugging of e.g. service setups ======================
# ======================================================================================================================

## to enable quick debugging set the log level to debug or trace
logger.services.name = org.deegree.services
logger.services.level = info

## logs the server startup, incoming requests and timing info, also enables enhanced request logging in $HOME/.deegree
#logger.OGCFrontController.name = org.deegree.services.controller.OGCFrontController
#logger.OGCFrontController.level = trace

## logs requests to the /resource servlet
logger.resources.name = org.deegree.services.resources
logger.resources.level = info

## logs requests to the /config servlet
logger.config.name = org.deegree.services.config
logger.config.level = info

## logs workspace activities
logger.workspace.name = org.deegree.workspace
logger.workspace.level = warn

## logs the SQL statements sent to the SQL server and startup/shutdown information
#logger.SQLFeatureStore.name = org.deegree.feature.persistence.sql.SQLFeatureStore
#logger.SQLFeatureStore.level = debug

## logs information about pool usage
#logger.ConnectionPool.name = org.deegree.commons.jdbc.ConnectionPool
#logger.ConnectionPool.level = debug

## logs information about dynamically guessing the encoding of strings/files when such information is not present
#logger.EncodingGuesser.name = org.deegree.commons.utils.EncodingGuesser
#logger.EncodingGuesser.level = debug

## log the executed statements
#logger.SQLExecution.name = org.deegree.client.core.utils.SQLExecution
#logger.SQLExecution.level = debug

# ======================================================================================================================
# = ATTENTION: The following configuration snippets are taken from log4j v1 configuration and require adjustments of   =
# = the logger identifier and each logger requires the attributes name and level, such as logger.<identifier>.name     =
# ======================================================================================================================

# ======================================================================================================================
# ================================================ WFS specific logging ================================================
# ======================================================================================================================

## logs information on all kinds of possible problems in your requests and your setup
#logger.services_wfs.name = org.deegree.services.wfs
#logger.services_wfs.level = warn

# ======================================================================================================================
# ================================================ WMS specific logging ================================================
# ======================================================================================================================

## logs information on all kinds of possible problems in your requests and your setup
#logger.services_wms.name = org.deegree.services.wms
#logger.services_wms.level = warn

## logs all kinds of information on the layer/styles structure and how it's created
#logger.org.deegree.services.wms = debug

## logs errors when querying feature stores/evaluating filter encoding expressions
#logger.org.deegree.services.wms.MapService = error

## logs if layers are skipped because of scale constraints, and info about feature store queries
#logger.org.deegree.services.wms.MapService = debug

## logs problems when loading layers, also invalid values for vendor specific parameters such as ANTIALIAS, QUALITY etc.
#logger.org.deegree.services.wms.MapService = warn

## logs unknown errors, problems with GetFeatureInfo templates and custom serializer classes
#logger.org.deegree.services.wms.controller.WMSController = warn

## logs sent exception messages, security information
#logger.org.deegree.services.wms.controller.WMSController = debug

## logs information about dimension handling
#logger.org.deegree.layer.AbstractLayer = warn

## logs problems with CRS when outputting 1.1.1 capabilities
#logger.org.deegree.services.wms.controller.capabilities.Capabilities111XMLAdapter = warn

## logs problems with CRS when outputting 1.3.0 capabilities
#logger.org.deegree.services.wms.controller.capabilities.Capabilities130XMLAdapter = warn

## logs information about dimension handling
#logger.org.deegree.layer.AbstractLayer = warn

## logs which named layers were extracted from SLD
#logger.org.deegree.protocol.wms.ops.SLDParser = DEBUG

# ======================================================================================================================
# ================================================= feature subsystem ==================================================
# ======================================================================================================================

## logs particle converter initialization
#logger.org.deegree.feature.persistence.sql.SQLFeatureStore = info

## logs problems when connecting to the DB/getting data from the DB
#logger.org.deegree.feature.persistence.simplesql.SimpleSQLFeatureStore = INFO

## logs the SQL statements sent to the SQL server
#logger.org.deegree.feature.persistence.simplesql.SimpleSQLFeatureStore = DEBUG

## logs SQL connection errors, set to trace to show all
#logger.org.deegree.feature.utils.DBUtils = info

## to enable quick debugging for feature subsystem
#logger.feature.name = org.deegree.feature
#logger.feature.level = debug

# ======================================================================================================================
# ================================================ Shape Feature Store =================================================
# ======================================================================================================================

## logs grave errors that were not foreseen to happen
#logger.shape.name = org.deegree.feature.persistence.shape
#logger.shape.level = debug

## logs reasons for not setting up the store
#logger.org.deegree.feature.persistence.shape.ShapeFeatureStore = warn

## logs information about reading the files, which srs etc.
#logger.org.deegree.feature.persistence.shape.ShapeFeatureStore = debug

# ======================================================================================================================
# =================================================== GML subsystem ====================================================
# ======================================================================================================================

## placeholder to enable quick debugging, please describe further
#logger.org.deegree.gml = DEBUG

# ======================================================================================================================
# ================================================= geometry subsystem =================================================
# ======================================================================================================================

## placeholder to enable quick debugging, please describe further
#logger.org.deegree.geometry = DEBUG

# ======================================================================================================================
# ================================================== filter subsystem ==================================================
# ======================================================================================================================

## logs when the fallback value is used or values cannot be parsed properly for the given type
#logger.org.deegree.filter.expression.custom.se.Interpolate = debug

## enables logging for filter subsystem
#logger.org.deegree.filter = debug

# ======================================================================================================================
# ================================================ rendering subsystem =================================================
# ======================================================================================================================

## log info about problems with the renderer setup, or broken geometries coming in, or problematic usage of the renderer
#logger.org.deegree.rendering.r2d.Java2DRenderer = warn

## log what's funny about rendering, eg. when null geometries are rendered, general info about the renderer, also log
## stack traces, use for debugging/improving your styles
#logger.org.deegree.rendering.r2d.Java2DRenderer = DEBUG

## logs when null rasters are rendered
#logger.rendering.name = org.deegree.rendering
#logger.rendering.level = trace

## logs details about the raster rendering process
#logger.org.deegree.rendering.r2d.Java2DRasterRenderer = trace

## logs which raster style is used for rendering
#logger.org.deegree.rendering.r2d.Java2DRasterRenderer = DEBUG

## logs usage of text rendering with unsupported geometry types
#logger.org.deegree.rendering.r2d.Java2DTextRenderer = warn

## logs rendering of null/zero length texts/null geometries
#logger.org.deegree.rendering.r2d.Java2DTextRenderer = DEBUG

## logs which text is rendered how
#logger.org.deegree.rendering.r2d.strokes.TextStroke = DEBUG

## logs implementation/code debugging details about text strokes
#logger.org.deegree.rendering.r2d.strokes.TextStroke = TRACE

# ======================================================================================================================
# ======================================================= Styles =======================================================
# ======================================================================================================================

## logs when style files cannot be loaded
#logger.style.name = org.deegree.style
#logger.style.level = trace

#  logs when style files cannot be loaded
#logger.org.deegree.services.wms.StyleRegistry = INFO

## logs information about loading/reloading of style files
#logger.org.deegree.services.wms.StyleRegistry = DEBUG

## logs stack traces
#logger.org.deegree.services.wms.StyleRegistry = TRACE

## logs which named layers were extracted from SLD
#logger.org.deegree.style.persistence.sld.SLDParser = DEBUG

## logs when problematic styles were found in the database
#logger.org.deegree.style.se.parser.PostgreSQLReader = DEBUG

## logs connection problems with the DB
#logger.org.deegree.style.se.parser.PostgreSQLWriter = INFO

# ======================================================================================================================
# ================================================= coverage subsystem =================================================
# ======================================================================================================================

## placeholder to enable quick debugging, please describe further
#logger.org.deegree.coverage = DEBUG

## logs when raster files could not be loaded
#logger.org.deegree.coverage.raster.container.DiskBasedTileContainer = DEBUG

# ======================================================================================================================
# =================================================== crs subsystem ====================================================
# ======================================================================================================================

## Get information about metadata of Coordinate System components.
#logger.org.deegree.cs.CRSIdentifiable = DEBUG

## Get information about the transformation of a list of ordinates.
#logger.org.deegree.cs.CoordinateTransformer = DEBUG

## Get information about created transformation chain.
#logger.org.deegree.cs.Transformer = DEBUG

## Output logging information on loading of Coordinate Systems from a configuration.
#logger.org.deegree.cs.configuration = DEBUG

## Get information about initializing the xml file.
#logger.org.deegree.cs.configuration.resources.XMLFileResource = DEBUG

## Get information about the initialization of the provider, as well as on requested objects.
#logger.org.deegree.cs.persistence.AbstractCRSStore = DEBUG

## the deegree XML format provider
#logger.org.deegree.cs.persistence.deegree.d3.DeegreeCRSStore = DEBUG

## Get information about the currently parsed crs, as well as a stack trace if something went wrong.
#logger.org.deegree.cs.persistence.deegree.d3.parsers.CoordinateSystemParser = DEBUG

## Get information about the currently parsed datums, as well as a stack trace if something went wrong.
#logger.org.deegree.cs.persistence.deegree.d3.parsers.DatumParser = DEBUG

## Get stacktraces if something goes wrong.
#logger.org.deegree.cs.persistence.deegree.d3.parsers.DefinitionParser = DEBUG

## Get information about the currently parsed ellipsoid, as well as a stack trace if something went wrong.
#logger.org.deegree.cs.persistence.deegree.d3.parsers.EllipsoidParser = DEBUG

## Get information about the currently parsed primemeridian, as well as a stack trace if something went wrong.
#logger.org.deegree.cs.persistence.deegree.d3.parsers.PrimemeridianParser = DEBUG

## Get information about the currently parsed projections, as well as a stack trace if something went wrong.
#logger.org.deegree.cs.persistence.deegree.d3.parsers.ProjectionParser = DEBUG

## Get information about the currently parsed transformation, as well as a stack trace if something went wrong.
#logger.org.deegree.cs.persistence.deegree.d3.parsers.TransformationParser = DEBUG

## Get information about the currently parsed coordinate system components.
#logger.org.deegree.cs.persistence.gml.GMLCRSStore = DEBUG

## Get information about the currently parsed transformations.
#logger.org.deegree.cs.persistence.gml.GMLFileResource = DEBUG

## the proj4 format provider
#logger.org.deegree.cs.persistence.proj4.PROJ4CRSStore = DEBUG

## Get information about errors while parsing the proj4 file.
#logger.org.deegree.cs.persistence.proj4.ProjFileResource = DEBUG

## Get logging information about projections and the execution of projections.
#logger.org.deegree.cs.projections = DEBUG

## Get information about incoming ordinates.
#logger.org.deegree.cs.projections.cylindric.Mercator = DEBUG

## Get information about incoming ordinates of the (inverse) projection.
#logger.org.deegree.cs.projections.cylindric.TransverseMercator = DEBUG

## Get information about transformations and the creation of transformation chains.
#logger.org.deegree.cs.transformations = DEBUG

## Get information about the transformation steps which were 'automatically' created.
#logger.org.deegree.cs.transformations.TransformationFactory = DEBUG

## Get information about the concatenation of two or more transformations.
#logger.org.deegree.cs.transformations.coordinate.ConcatenatedTransform = DEBUG

## Get information about the incoming ordinates of a direct transformation.
#logger.org.deegree.cs.transformations.coordinate.DirectTransform = DEBUG

## Get information about the incoming ordinates of a geocentric transformation.
#logger.org.deegree.cs.transformations.coordinate.GeocentricTransform = DEBUG

## Get information about axis of the projection as well as the used projection and the incoming ordinates.
#logger.org.deegree.cs.transformations.coordinate.ProjectionTransform = DEBUG

## Get stack traces if an error occurred while loading / transforming (on) a gridshift file.
#logger.org.deegree.cs.transformations.ntv2.NTv2Transformation = DEBUG

## Get information transformation substitution process.
#logger.org.deegree.cs.utilities.MappingUtils = DEBUG

## Get information about the swapping of axis and the creation of standardized values.
#logger.org.deegree.cs.utilities.Matrix = DEBUG